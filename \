from Linearity import Neuron
n = Neuron.load(sys.argv[1])

for expType, exp in n:
        maxIndex = int(samplingFreq*maxOnset*1e-3)
        if expType == 1:
            maxOnsetIndex = np.argmax(-self.interestWindow[:maxIndex])
        elif expType == 2:
            maxOnsetIndex = np.argmax(self.interestWindow[:maxIndex])
        else:
            maxOnsetIndex = np.argmax(self.interestWindow[:maxIndex])

	#maxOnsetIndex = np.argmax(abs(self.interestWindow))
        minOnsetTime = 2 #ms

        window_size = len(self.interestWindow)
        step_size = int(samplingFreq*step*1e-3)

        overlap =  int(samplingFreq*0.05*1e-3)

        index_right = maxOnsetIndex
        index_left = index_right - step_size
        minOnset = int(samplingFreq*minOnsetTime*1e-3)

        baseMean = np.mean(self.interestWindow[:minOnset])
        factor = 5 
        thresholdGradient = 0.01
        pValTolerance = initpValTolerance

        #if -baseMean*factor < self.interestWindow[maxOnsetIndex] < baseMean*factor:
        #    return 0
        #print baseMean
        l_window = self.interestWindow[:minOnset]
        while (index_left>minOnset):
            r_window = self.interestWindow[index_left:index_right] #, self.baselineWindow #self.interestWindow[index_left - step_size:index_left]

            #if baseMean - 0.1 < np.mean(r_window) < baseMean + 0.1:
            #if (-factor*baseMean  < np.mean(r_window) < factor*baseMean) and (np.average(np.abs(np.gradient(r_window))) < thresholdGradient):

            stat, pVal = ss.ks_2samp(r_window, l_window)
            if pVal>pValTolerance:
                #print pVal, pValTolerance,float(index_right)/samplingFreq
                if (self.experiment.type == 1):# and np.mean(self.interestWindow[index_left:index_right]) >= baseMean) :
                    #return float(index_right + np.argmax(self.interestWindow[index_right:maxOnsetIndex]))/samplingFreq
                    smoothing = []
                    #for index in range(index_right, maxOnsetIndex-step_size+1):
                    #    smoothing.append(np.average(self.interestWindow[index: index+step_size]))
                    if len(smoothing)>2:
                        return float(index_right + np.argmax(smoothing) + int(step_size/2))/samplingFreq
                    else:
                        return float(index_right)/samplingFreq
                    #return float(index_right + np.argmax(np.abs(np.gradient(self.interestWindow[index_right:maxOnsetIndex]))))/samplingFreq
                    #        return float(index) /samplingFreq
                elif (self.experiment.type == 2):# and np.mean(self.interestWindow[index_left:index_right]) <= baseMean):
                    #return float(index_right + np.argmin(self.interestWindow[index_right:maxOnsetIndex]))/samplingFreq
                    #return float(index_right + np.argmax(np.abs(np.gradient(self.interestWindow[index_right:maxOnsetIndex]))))/samplingFreq
                    smoothing = []
                    #for index in range(index_right, maxOnsetIndex-step_size+1):
                    #    smoothing.append(np.average(self.interestWindow[index: index+step_size]))
                    if len(smoothing)>2:
                        return float(index_right + np.argmin(smoothing)+ int(step_size/2))/samplingFreq
                        #return float(index_right + step_size*np.argmax(np.abs(np.gradient(smoothing))))/samplingFreq
                    else:
                        return float(index_right)/samplingFreq

                    #return float(index_right + step_size*np.argmax(np.abs(np.gradient(smoothing))))/samplingFreq
                    #    if (np.average(self.interestWindow[index: index+step_size]))> 5*baseMean:
                    #        return float(index) /samplingFreq
                    #return float(index_right + np.argmax((self.interestWindow[index_right:]>baseMean)) ) /samplingFreq
                else:
                    return float(index_right)/samplingFreq
                #return float(index_left+(step_size/2))/samplingFreq
            else:
                index_left-=overlap
                index_right-=overlap
                if index_left<=minOnset:
                    pValTolerance/=2
                    #factor*=2
                    #thresholdGradient*=2
                    if pValTolerance<0.01:
                        print "{} pval too low for {} tolerance, increasing baseline size".format(pVal, pValTolerance)
                        minOnset*=2
                        #step_size*=2
                        index_right = maxOnsetIndex
                        index_left = maxOnsetIndex - step_size

                        l_window = self.interestWindow[:minOnset]
                        pValTolerance = initpValTolerance 

                        if minOnset > maxOnsetIndex - step_size :
                            print "Returning Nan"
                            return np.nan
                    else:
                        index_right = maxOnsetIndex
                        index_left = maxOnsetIndex - step_size


